// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: buzXQZLRHRnzx37qjmm2UD
// Component: dLDSQ4pjpCqV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: IBzB1z8_37wm/component
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: buzXQZLRHRnzx37qjmm2UD/projectcss
import sty from "./PlasmicUserDetail.module.css"; // plasmic-import: dLDSQ4pjpCqV/css

createPlasmicElementProxy;

export type PlasmicUserDetail__VariantMembers = {};
export type PlasmicUserDetail__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserDetail__VariantsArgs;
export const PlasmicUserDetail__VariantProps = new Array<VariantPropType>();

export type PlasmicUserDetail__ArgsType = {};
type ArgPropType = keyof PlasmicUserDetail__ArgsType;
export const PlasmicUserDetail__ArgProps = new Array<ArgPropType>();

export type PlasmicUserDetail__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  dataProvider?: Flex__<typeof DataProvider>;
  img?: Flex__<typeof PlasmicImg__>;
  h1?: Flex__<"h1">;
  h4?: Flex__<"h4">;
  notesInput?: Flex__<typeof AntdTextArea>;
  updateButton?: Flex__<typeof AntdButton>;
};

export interface DefaultUserDetailProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserDetail__RenderFunc(props: {
  variants: PlasmicUserDetail__VariantsArgs;
  args: PlasmicUserDetail__ArgsType;
  overrides: PlasmicUserDetail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "notesInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.user.notes;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <DataProvider
            data-plasmic-name={"dataProvider"}
            data-plasmic-override={overrides.dataProvider}
            className={classNames("__wab_instance", sty.dataProvider)}
            data={(() => {
              try {
                return $ctx.app.users.find(u => u.id == $ctx.params.id);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    {
                      name: "Fill Murray",
                      birthYear: 1950,
                      profilePicture: ["https://www.fillmurray.com/200/300"]
                    },
                    {
                      name: "Place Cage",
                      birthYear: 1950,
                      profilePicture: ["https://www.placecage.com/200/300"]
                    }
                  ];
                }
                throw e;
              }
            })()}
            name={"user"}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vwKFs)}
                >
                  <section
                    className={classNames(projectcss.all, sty.section__e559I)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dyDQz)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"160px"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $ctx.user.photo_url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y35I
                        )}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.user.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h1>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hOcfo
                          )}
                        >
                          <React.Fragment>
                            {"Last modified: " + $ctx.user.date_created}
                          </React.Fragment>
                        </div>
                      </div>
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__xkY6N)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Notes"}
                    </h4>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.notesInput),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["notesInput", "value"],
                          AntdTextArea_Helpers
                        ),
                        value: generateStateValueProp($state, [
                          "notesInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "notesInput.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "notesInput.value",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return $ctx.user.notes;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        []
                      );
                      return (
                        <AntdTextArea
                          data-plasmic-name={"notesInput"}
                          data-plasmic-override={overrides.notesInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    <AntdButton
                      data-plasmic-name={"updateButton"}
                      data-plasmic-override={overrides.updateButton}
                      className={classNames("__wab_instance", sty.updateButton)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fDsP4
                        )}
                      >
                        {"Update"}
                      </div>
                    </AntdButton>
                  </section>
                </Stack__>
              )}
            </DataCtxReader__>
          </DataProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "dataProvider",
    "img",
    "h1",
    "h4",
    "notesInput",
    "updateButton"
  ],
  header: ["header"],
  dataProvider: [
    "dataProvider",
    "img",
    "h1",
    "h4",
    "notesInput",
    "updateButton"
  ],
  img: ["img"],
  h1: ["h1"],
  h4: ["h4"],
  notesInput: ["notesInput"],
  updateButton: ["updateButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  dataProvider: typeof DataProvider;
  img: typeof PlasmicImg__;
  h1: "h1";
  h4: "h4";
  notesInput: typeof AntdTextArea;
  updateButton: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserDetail__VariantsArgs;
    args?: PlasmicUserDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUserDetail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserDetail__ArgProps,
          internalVariantPropNames: PlasmicUserDetail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserDetail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserDetail";
  } else {
    func.displayName = `PlasmicUserDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicUserDetail = Object.assign(
  // Top-level PlasmicUserDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    dataProvider: makeNodeComponent("dataProvider"),
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    notesInput: makeNodeComponent("notesInput"),
    updateButton: makeNodeComponent("updateButton"),

    // Metadata about props expected for PlasmicUserDetail
    internalVariantProps: PlasmicUserDetail__VariantProps,
    internalArgProps: PlasmicUserDetail__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserDetail;
/* prettier-ignore-end */
