// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: buzXQZLRHRnzx37qjmm2UD
// Component: qqFD2GcyeBVD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Module from "../../Module"; // plasmic-import: oevT7TIldYMC/component
import UserRow from "../../UserRow"; // plasmic-import: 9Juzr8j2x2AR/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: buzXQZLRHRnzx37qjmm2UD/projectcss
import sty from "./PlasmicUsersModule.module.css"; // plasmic-import: qqFD2GcyeBVD/css

createPlasmicElementProxy;

export type PlasmicUsersModule__VariantMembers = {};
export type PlasmicUsersModule__VariantsArgs = {};
type VariantPropType = keyof PlasmicUsersModule__VariantsArgs;
export const PlasmicUsersModule__VariantProps = new Array<VariantPropType>();

export type PlasmicUsersModule__ArgsType = {};
type ArgPropType = keyof PlasmicUsersModule__ArgsType;
export const PlasmicUsersModule__ArgProps = new Array<ArgPropType>();

export type PlasmicUsersModule__OverridesType = {
  root?: Flex__<typeof Module>;
  freeBox?: Flex__<"div">;
  userRow?: Flex__<typeof UserRow>;
};

export interface DefaultUsersModuleProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUsersModule__RenderFunc(props: {
  variants: PlasmicUsersModule__VariantsArgs;
  args: PlasmicUsersModule__ArgsType;
  overrides: PlasmicUsersModule__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Module
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      content={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $ctx.app.users;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const user = __plasmic_item_0;
            const userIndex = __plasmic_idx_0;
            return (
              <UserRow
                data-plasmic-name={"userRow"}
                data-plasmic-override={overrides.userRow}
                className={classNames("__wab_instance", sty.userRow)}
                key={userIndex}
                user={(() => {
                  try {
                    return user;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            );
          })}
        </div>
      }
      title={"Users Module"}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "userRow"],
  freeBox: ["freeBox", "userRow"],
  userRow: ["userRow"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Module;
  freeBox: "div";
  userRow: typeof UserRow;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUsersModule__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUsersModule__VariantsArgs;
    args?: PlasmicUsersModule__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUsersModule__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUsersModule__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUsersModule__ArgProps,
          internalVariantPropNames: PlasmicUsersModule__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUsersModule__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUsersModule";
  } else {
    func.displayName = `PlasmicUsersModule.${nodeName}`;
  }
  return func;
}

export const PlasmicUsersModule = Object.assign(
  // Top-level PlasmicUsersModule renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    userRow: makeNodeComponent("userRow"),

    // Metadata about props expected for PlasmicUsersModule
    internalVariantProps: PlasmicUsersModule__VariantProps,
    internalArgProps: PlasmicUsersModule__ArgProps
  }
);

export default PlasmicUsersModule;
/* prettier-ignore-end */
